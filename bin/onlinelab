#!/usr/bin/env python

import os
import re
import sys
import logging
import argparse

DEFAULT_CORE_PORT    = 8000
DEFAULT_SERVICE_PORT = 9000

DEFAULT_MAX_SIZE     = 10*1000*1000      # store 10 MB in a log file
DEFAULT_NUM_BACKUPS  = 10                # keep 10 log files at most

def sys_path_hack():
    """Hook in-tree Online Lab mode into Python path. """
    script_dir = os.path.dirname(__file__)              # bin/onlinelab
    module_top = os.path.split(script_dir)[0]           # ../
    module_dir = os.path.join(module_top, 'onlinelab')  # ../onlinelab/

    if os.path.isdir(module_dir):
        sys.path.insert(0, os.path.abspath(module_top))

def path(string):
    """Convert a string to an absolute path. """
    return os.path.abspath(string)

def boolean(string):
    """Convert a string to a boolean value. """
    string = string.lower()

    if string in ['0', 'f', 'false', 'no', 'off']:
        return False

    if string in ['1', 't', 'true', 'yes', 'on']:
        return True

    raise ValueError("'%s' can't be treated as a boolean option" % string)

class PathAction(argparse.Action):
    """Handle colon-separated, relative paths. """

    def __call__(self, parser, namespace, values, option_string=None):
        values = values.split(os.path.pathsep)
        values = map(os.path.abspath, values)

        paths = getattr(namespace, self.dest)
        paths.extend(values)

        setattr(namespace, self.dest, paths)

class VersionAction(argparse.Action):
    """Display version information and quit. """

    def __call__(self, parser, namespace, values, option_string=None):
        sys_path_hack()

        from onlinelab import __version__
        print "Online Lab version %s" % __version__

        sys.exit(0)

class ConfigureAction(argparse.Action):
    """Configure-style boolean options. """

    def __init__(self,
                 option_strings,
                 dest,
                 default=None,
                 required=False,
                 help=None,
                 metavar=None,
                 positive_prefixes=['--', '--with-', '--enable-'],
                 negative_prefixes=['--no-', '--without-', '--disable-']):
        strings = []

        self.positive_strings = set()
        self.negative_strings = set()

        for string in option_strings:
            assert re.match(r'--[A-z]+', string)

            suffix = string[2:]

            for positive_prefix in positive_prefixes:
                self.positive_strings.add(positive_prefix + suffix)
                strings.append(positive_prefix + suffix)

            for negative_prefix in negative_prefixes:
                self.negative_strings.add(negative_prefix + suffix)
                strings.append(negative_prefix + suffix)

        super(ConfigureAction, self).__init__(
            option_strings=strings,
            dest=dest,
            nargs='?',
            const=None,
            default=default,
            type=boolean,
            choices=None,
            required=required,
            help=help,
            metavar=metavar)

    def __call__(self, parser, namespace, value, option_string=None):
        if value is None:
            value = option_string in self.positive_strings
        elif option_string in self.negative_strings:
            value = not value

        setattr(namespace, self.dest, value)

class Module(object):
    """Base class for Online Lab modules. """

    def __init__(self, args):
        getattr(self, args.func)(args)

class Core(Module):
    """Online Lab core module. """

    def init(self, args):
        """Initialize a new core server. """
        import onlinelab.core
        onlinelab.core.init(args)

    def start(self, args):
        """Start an existing core server. """
        import onlinelab.core
        onlinelab.core.start(args)

    def stop(self, args):
        """Stop a running core server. """
        import onlinelab.core
        onlinelab.core.stop(args)

    def restart(self, args):
        """Restart a running core server. """
        import onlinelab.core
        onlinelab.core.restart(args)

    def status(self, args):
        """Display information about a core server. """
        import onlinelab.core
        onlinelab.core.status(args)

class Service(Module):
    """Online Lab service module. """

    def init(self, args):
        """Initialize a new service. """
        import onlinelab.service
        onlinelab.service.init(args)

    def start(self, args):
        """Start an existing service. """
        import onlinelab.service
        onlinelab.service.start(args)

    def stop(self, args):
        """Stop a running service. """
        import onlinelab.service
        onlinelab.service.stop(args)

    def restart(self, args):
        """Restart a running service. """
        import onlinelab.service
        onlinelab.service.restart(args)

    def status(self, args):
        """Display information about a service. """
        import onlinelab.service
        onlinelab.service.status(args)

options = {
    'python-path': (
        ('--python-path',), {
            'default': [],
            'action': PathAction,
        },
    ),
    'version': (
        ('--version',), {
            'nargs': 0,
            'action': VersionAction,
        },
    ),
    'debug': (
        ('--debug',), {
            'default': False,
            'action': ConfigureAction,
        },
    ),
    'home': (
        ('--home',), {
            'default': '.',
            'type': path,
        },
    ),
    'port': (
        ('--port',), {
            'default': None,
            'type': int,
        },
    ),
    'daemon': (
        ('--daemon',), {
            'default': True,
            'action': ConfigureAction,
        },
    ),
    'settings': (
        ('--settings',), {
            'default': 'frontend.settings',
        },
    ),
    'pid-file': (
        ('--pid-file',), {
            'default': None,
        },
    ),
    'log-file': (
        ('--log-file',), {
            'default': None,
        },
    ),
    'log-level': (
        ('--log-level',), {
            'default': 'info',
            'choices': ('none', 'info', 'warning', 'error'),
        },
    ),
    'log-max-size': (
        ('--log-max-size',), {
            'default': DEFAULT_MAX_SIZE,
            'type': int,
        },
    ),
    'log-num-backups': (
        ('--log-num-backups',), {
            'default': DEFAULT_NUM_BACKUPS,
            'type': int,
        },
    ),
}

modules = {
    ('core', Core): {
        'init': [],
        'start': [('port', {'default': DEFAULT_CORE_PORT}), 'daemon', 'settings',
            'pid-file', 'log-file', 'log-level', 'log-max-size', 'log-num-backups'],
        'stop': [],
        'restart': [],
        'status': [],
    },
    ('service', Service): {
        'init': [],
        'start': [('port', {'default': DEFAULT_SERVICE_PORT}), 'daemon',
            'pid-file', 'log-file', 'log-level', 'log-max-size', 'log-num-backups'],
        'stop': [],
        'restart': [],
        'status': [],
    },
}

commons = ['debug', 'python-path', 'home']

def init_parser():
    """Construct command-line parser based on global settings. """
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    args, kwargs = options['version']
    parser.add_argument(*args, **kwargs)

    for (module, cls), funcs in modules.iteritems():
        module_parser = subparsers.add_parser(module)
        module_parser.set_defaults(module=cls)

        module_subparsers = module_parser.add_subparsers()

        for func, specs in funcs.iteritems():
            func_parser = module_subparsers.add_parser(func)
            func_parser.set_defaults(func=func)

            for spec in commons + specs:
                override = None

                if isinstance(spec, tuple):
                    spec, override = spec

                args, kwargs = options[spec]

                if override is not None:
                    kwargs = dict(kwargs)
                    kwargs.update(override)

                func_parser.add_argument(*args, **kwargs)

    return parser

def main():
    """Parse command line and run appropriate module. """
    args = init_parser().parse_args()

    sys_path_hack()

    for path in args.python_path:
        sys.path.insert(0, path)

    args.module(args)

if __name__ == "__main__":
    main()

